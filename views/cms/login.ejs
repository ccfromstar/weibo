<!DOCTYPE html>
<html lang="zh-CN">
  <!-- 强烈建议为 html 根元素指定 lang 属性，从而为文档设置正确的语言。这将有助于语音合成工具确定其所应该采用的发音，有助于翻译工具确定其翻译时所应遵守的规则等等。-->
  <head>
    <title>博主后台管理</title>
    <!-- IE 支持通过特定的 <meta> 标签来确定绘制当前页面所应该采用的 IE 版本。除非有强烈的特殊需求，否则最好是设置为 edge mode，从而通知 IE 采用其所支持的最新的模式。-->
    <meta http-equiv="X-UA-Compatible" content="IE=Edge">
    <!-- 通过明确声明字符编码，能够确保浏览器快速并容易的判断页面内容的渲染方式。这样做的好处是，可以避免在 HTML 中使用字符实体标记（character entity），从而全部与文档编码一致（一般采用 UTF-8 编码）。-->
    <meta charset="UTF-8">
    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->
    
    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <link rel="stylesheet" href="/stylesheets/layout.css">
    <link rel="stylesheet" href="/bootstrap/dist/css/bootstrap.min.css">

    <!-- 可选: 包含 jQuery 库 -->
    <script src="/javascripts/jquery.min.js"></script>
    <script type="text/javascript" src="/javascripts/Kindeditor/kindeditor-min.js"></script>
    <script type="text/javascript" src="/javascripts/Kindeditor/lang/zh_CN.js"></script>
  </head>

  <body>
  <form class="form-horizontal" method="post" action="logindo">
    <fieldset style="margin-left:10px;">
      <legend>用户登入</legend>
      <div class="control-group">
        <label  for="username" style="width:50px;margin-top:5px;">用户名</label>
        <span class="controls" style="margin-top:5px;">
          <input type="text" class="input-xlarge" id="username" name="username">
        </span>
      </div>
      <div class="control-group">
        <label  for="password" style="width:50px;" >口&nbsp;令</label>
        <span class="controls">
          <input type="password" class="input-xlarge" id="password" name="password">
        </span>
      </div>
      <div class="form-actions" style="margin-top:5px">
          <button type="submit" class="btn btn-primary btn-xs">登入</button>
      </div>
    </fieldset>
  </form>

    <script src="/bootstrap/dist/js/bootstrap.min.js"></script>
  
  </body>
</html>
